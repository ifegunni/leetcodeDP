class Solution:
    def climbStairs(self, n: int) -> int:
        cache = [None]*(n+1)
        return self._helper(n, cache)
    
    def _helper(self, n, cache):
        if n < 0:
            return 0
        if n == 1 or n == 0: 
            return 1
        if cache[n]:
            return cache[n]
        cache[n] =  self._helper(n-1, cache) + self._helper(n-2, cache) 
        return cache[n]
        
        
#The more efficient solution with O(n) time  and O(1) space      
 def climbStairs(n: int) -> int:
    if n <= 2:
        return n
        
    first = 1
    second = 1 
    for i in range(2, n+1):
        ways = first + second
        first = second
        second = ways
    return ways
